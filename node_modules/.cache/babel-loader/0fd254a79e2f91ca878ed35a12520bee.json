{"ast":null,"code":"import { Directive, Output, EventEmitter, Input } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport class InViewportDirective {\n  constructor(_el) {\n    this._el = _el;\n    this.inViewport = new EventEmitter();\n  }\n\n  ngOnChanges() {\n    this.check();\n  }\n\n  ngOnInit() {}\n\n  check(partial = true) {\n    const el = this._el.nativeElement;\n    const elSize = el.offsetWidth * el.offsetHeight;\n    const rec = el.getBoundingClientRect();\n    const vp = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    const sectionMarging = 370;\n    const tViz = rec.top >= 0 && rec.top < vp.height - sectionMarging;\n    const bViz = rec.bottom > 0 && rec.bottom <= vp.height - sectionMarging;\n    const vVisible = partial ? tViz || bViz : tViz && bViz;\n    let event = {\n      target: el,\n      value: false\n    };\n    event[\"value\"] = elSize && vVisible;\n\n    if (event[\"value\"]) {\n      this.inViewport.emit(event);\n    }\n  }\n\n}\n\nInViewportDirective.ɵfac = function InViewportDirective_Factory(t) {\n  return new (t || InViewportDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nInViewportDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: InViewportDirective,\n  selectors: [[\"\", \"in-viewport\", \"\"]],\n  inputs: {\n    pageYOffset: \"pageYOffset\"\n  },\n  outputs: {\n    inViewport: \"inViewport\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(InViewportDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[in-viewport]\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    pageYOffset: [{\n      type: Input,\n      args: [\"pageYOffset\"]\n    }],\n    inViewport: [{\n      type: Output,\n      args: [\"inViewport\"]\n    }]\n  });\n})();","map":{"version":3,"sources":["C:\\Users\\hacke\\git\\live-resume\\src\\app\\core\\directive\\on-viewport.directive.ts"],"names":[],"mappings":"AAAA,SACI,SADJ,EAEgB,MAFhB,EAGI,YAHJ,EAGkB,KAHlB,QAKO,eALP;;AAWA,OAAM,MAAO,mBAAP,CAA0B;AAK5B,EAAA,WAAA,CAAoB,GAApB,EAAkC;AAAd,SAAA,GAAA,GAAA,GAAA;AAChB,SAAK,UAAL,GAAkB,IAAI,YAAJ,EAAlB;AACH;;AAEM,EAAA,WAAW,GAAA;AACd,SAAK,KAAL;AACN;;AAEE,EAAA,QAAQ,GAAA,CAAM;;AAEd,EAAA,KAAK,CAAC,OAAA,GAAkB,IAAnB,EAAuB;AAExB,UAAM,EAAE,GAAG,KAAK,GAAL,CAAS,aAApB;AACA,UAAM,MAAM,GAAI,EAAE,CAAC,WAAH,GAAiB,EAAE,CAAC,YAApC;AAEA,UAAM,GAAG,GAAG,EAAE,CAAC,qBAAH,EAAZ;AAEA,UAAM,EAAE,GAAG;AACP,MAAA,KAAK,EAAE,MAAM,CAAC,UADP;AAEP,MAAA,MAAM,EAAE,MAAM,CAAC;AAFR,KAAX;AAKA,UAAM,cAAc,GAAG,GAAvB;AACA,UAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,IAAW,CAAX,IAAgB,GAAG,CAAC,GAAJ,GAAW,EAAE,CAAC,MAAH,GAAY,cAApD;AACA,UAAM,IAAI,GAAG,GAAG,CAAC,MAAJ,GAAa,CAAb,IAAkB,GAAG,CAAC,MAAJ,IAAe,EAAE,CAAC,MAAH,GAAY,cAA1D;AAEA,UAAM,QAAQ,GAAG,OAAO,GAAG,IAAI,IAAI,IAAX,GAAkB,IAAI,IAAI,IAAlD;AAEA,QAAI,KAAK,GAAG;AACR,MAAA,MAAM,EAAE,EADA;AAER,MAAA,KAAK,EAAE;AAFC,KAAZ;AAKA,IAAA,KAAK,CAAC,OAAD,CAAL,GAAkB,MAAM,IAAI,QAA5B;;AAEA,QAAG,KAAK,CAAC,OAAD,CAAR,EAAmB;AACf,WAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;AACH;AACJ;;AA3C2B;;;mBAAnB,mB,EAAmB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;QAAnB,mB;AAAmB,EAAA,SAAA,EAAA,CAAA,CAAA,EAAA,EAAA,aAAA,EAAA,EAAA,CAAA,C;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA;AAAA,G;AAAA,EAAA,OAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,G;AAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,oBAAA;;;;;uBAAnB,mB,EAAmB,CAAA;UAJ/B,SAI+B;WAJrB;AACT,MAAA,QAAQ,EAAE;AADD,K;AAIqB,GAAA,C;;;;;;YAE3B,K;aAAM,a;;;YACN,M;aAAO,Y","sourcesContent":["import {\r\n    Directive, OnInit,\r\n    ElementRef, Output,\r\n    EventEmitter, Input,\r\n    OnChanges\r\n} from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[in-viewport]\"\r\n})\r\n\r\nexport class InViewportDirective implements OnInit, OnChanges {\r\n\r\n    @Input(\"pageYOffset\") pageYOffset: number;\r\n    @Output(\"inViewport\") inViewport:EventEmitter<Object>;\r\n\r\n    constructor(private _el:ElementRef) {\r\n        this.inViewport = new EventEmitter();\r\n    }\r\n\r\n    public ngOnChanges() : void {\r\n        this.check();\r\n\t}\r\n\r\n    ngOnInit() { }\r\n\r\n    check(partial:boolean = true) {\r\n\r\n        const el = this._el.nativeElement;\r\n        const elSize = (el.offsetWidth * el.offsetHeight);\r\n\r\n        const rec = el.getBoundingClientRect();\r\n\r\n        const vp = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        };\r\n\r\n        const sectionMarging = 370;\r\n        const tViz = rec.top >= 0 && rec.top < (vp.height - sectionMarging);\r\n        const bViz = rec.bottom > 0 && rec.bottom <= (vp.height - sectionMarging);\r\n\r\n        const vVisible = partial ? tViz || bViz : tViz && bViz;\r\n\r\n        let event = {\r\n            target: el,\r\n            value: false\r\n        };\r\n\r\n        event[\"value\"] = (elSize && vVisible);       \r\n\r\n        if(event[\"value\"]) {\r\n            this.inViewport.emit(event);\r\n        }\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}