{"ast":null,"code":"export class Typed {\n  constructor(element, options, phrases) {\n    const defaults = {\n      typeSpeed: 23,\n      startDelay: 20,\n      phrasePeriod: 20\n    };\n    this.text = \"\";\n    this.isDeleting = false;\n    this.loopNum = 0;\n    this.element = element;\n    this.options = Object.assign(Object.assign({}, defaults), options);\n    this.phrases = phrases;\n    this.appendAnimationCss();\n  }\n\n  begin() {\n    this.timeout = setTimeout(() => {\n      this.typewrite();\n    }, this.options.startDelay);\n  }\n\n  insertSpan(text) {\n    this.element.innerHTML = `<span class=\"wrap\">${text}</span>`;\n  }\n\n  typewrite() {\n    let i = this.loopNum % this.phrases.length;\n    let fullTxt = this.phrases[i];\n\n    if (this.isDeleting) {\n      this.text = fullTxt.substring(0, this.text.length - 1);\n    } else {\n      this.text = fullTxt.substring(0, this.text.length + 1);\n    }\n\n    this.insertSpan(this.text);\n    let that = this;\n    let delta = this.options.typeSpeed - Math.random() * 100;\n\n    if (this.isDeleting) {\n      delta /= 2;\n    }\n\n    if (!this.isDeleting && this.text === fullTxt) {\n      delta = this.options.phrasePeriod;\n      this.isDeleting = true;\n    } else if (this.isDeleting && this.text === \"\") {\n      this.isDeleting = false;\n      this.loopNum++;\n      delta = 500;\n    }\n\n    setTimeout(function () {\n      that.typewrite();\n    }, delta);\n  }\n\n  appendAnimationCss() {\n    let css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"typing\";\n    const innerCss = `\n            .txt-rotate > .wrap::after {\n                content: \"|\";\n                opacity: 1;\n                animation: typedBlink 0.7s infinite;\n                -webkit-animation: typedBlink 0.7s infinite;\n                animation: typedBlink 0.7s infinite;\n            }\n            @keyframes typedBlink{\n                50% { opacity: 0.0; }\n            }\n            @-webkit-keyframes typedBlink{\n                0% { opacity: 1; }\n                50% { opacity: 0.0; }\n                100% { opacity: 1; }\n            }\n        `;\n    css.innerHTML = innerCss;\n    document.head.appendChild(css);\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\hacke\\git\\live-resume\\src\\app\\welcome\\welcome-dialog\\welcome-dialog-typing\\typed.ts"],"names":[],"mappings":"AAEA,OAAM,MAAO,KAAP,CAAY;AAUd,EAAA,WAAA,CAAY,OAAZ,EAA0B,OAA1B,EAA2D,OAA3D,EAA4E;AACxE,UAAM,QAAQ,GAA2B;AACrC,MAAA,SAAS,EAAE,EAD0B;AAErC,MAAA,UAAU,EAAE,EAFyB;AAGrC,MAAA,YAAY,EAAE;AAHuB,KAAzC;AAMA,SAAK,IAAL,GAAY,EAAZ;AACA,SAAK,UAAL,GAAkB,KAAlB;AACA,SAAK,OAAL,GAAe,CAAf;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,QAAP,CAAA,EAAoB,OAApB,CAAZ;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,kBAAL;AACH;;AAEM,EAAA,KAAK,GAAA;AACR,SAAK,OAAL,GAAe,UAAU,CAAC,MAAK;AAC3B,WAAK,SAAL;AACH,KAFwB,EAEtB,KAAK,OAAL,CAAa,UAFS,CAAzB;AAGH;;AAEO,EAAA,UAAU,CAAE,IAAF,EAAc;AAC5B,SAAK,OAAL,CAAa,SAAb,GAAyB,sBAAsB,IAAI,SAAnD;AACH;;AAGO,EAAA,SAAS,GAAA;AACb,QAAI,CAAC,GAAG,KAAK,OAAL,GAAe,KAAK,OAAL,CAAa,MAApC;AACA,QAAI,OAAO,GAAG,KAAK,OAAL,CAAa,CAAb,CAAd;;AAEA,QAAI,KAAK,UAAT,EAAqB;AACjB,WAAK,IAAL,GAAY,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,KAAK,IAAL,CAAU,MAAV,GAAmB,CAAxC,CAAZ;AACH,KAFD,MAEO;AACH,WAAK,IAAL,GAAY,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,KAAK,IAAL,CAAU,MAAV,GAAmB,CAAxC,CAAZ;AACH;;AAED,SAAK,UAAL,CAAgB,KAAK,IAArB;AAEA,QAAI,IAAI,GAAG,IAAX;AACA,QAAI,KAAK,GAAG,KAAK,OAAL,CAAa,SAAb,GAAyB,IAAI,CAAC,MAAL,KAAgB,GAArD;;AAEA,QAAI,KAAK,UAAT,EAAqB;AAAE,MAAA,KAAK,IAAI,CAAT;AAAa;;AAEpC,QAAI,CAAC,KAAK,UAAN,IAAoB,KAAK,IAAL,KAAc,OAAtC,EAA+C;AAC3C,MAAA,KAAK,GAAG,KAAK,OAAL,CAAa,YAArB;AACA,WAAK,UAAL,GAAkB,IAAlB;AACH,KAHD,MAGO,IAAI,KAAK,UAAL,IAAmB,KAAK,IAAL,KAAc,EAArC,EAAyC;AAC5C,WAAK,UAAL,GAAkB,KAAlB;AACA,WAAK,OAAL;AACA,MAAA,KAAK,GAAG,GAAR;AACH;;AAED,IAAA,UAAU,CAAC,YAAA;AACP,MAAA,IAAI,CAAC,SAAL;AACH,KAFS,EAEP,KAFO,CAAV;AAGH;;AAEO,EAAA,kBAAkB,GAAA;AACtB,QAAI,GAAG,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAAV;AACA,IAAA,GAAG,CAAC,IAAJ,GAAW,UAAX;AACA,IAAA,GAAG,CAAC,EAAJ,GAAS,QAAT;AAEA,UAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;SAAjB;AAkBA,IAAA,GAAG,CAAC,SAAJ,GAAgB,QAAhB;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,GAA1B;AACH;;AA7Fa","sourcesContent":["import { TypingAnimationOptions } from \"./typingAnimationOptions.interface\";\r\n\r\nexport class Typed {\r\n\r\n    element: any;\r\n    options: TypingAnimationOptions;\r\n    phrases: string[];\r\n    timeout: any;\r\n    isDeleting: boolean;\r\n    loopNum: number;\r\n    text: string;\r\n\r\n    constructor(element: any, options: TypingAnimationOptions, phrases: string[]) {\r\n        const defaults: TypingAnimationOptions = {\r\n            typeSpeed: 23,\r\n            startDelay: 20,\r\n            phrasePeriod: 20\r\n        };\r\n        \r\n        this.text = \"\";\r\n        this.isDeleting = false;\r\n        this.loopNum = 0;\r\n        this.element = element\r\n        this.options = {...defaults, ...options}\r\n        this.phrases = phrases;\r\n        this.appendAnimationCss()\r\n    }\r\n\r\n    public begin () {\r\n        this.timeout = setTimeout(() => {\r\n            this.typewrite()\r\n        }, this.options.startDelay)\r\n    }\r\n\r\n    private insertSpan (text: string) {\r\n        this.element.innerHTML = `<span class=\"wrap\">${text}</span>`;\r\n    }\r\n\r\n\r\n    private typewrite() {\r\n        let i = this.loopNum % this.phrases.length;\r\n        let fullTxt = this.phrases[i];\r\n\r\n        if (this.isDeleting) {\r\n            this.text = fullTxt.substring(0, this.text.length - 1);\r\n        } else {\r\n            this.text = fullTxt.substring(0, this.text.length + 1);\r\n        }\r\n\r\n        this.insertSpan(this.text);\r\n\r\n        let that = this;\r\n        let delta = this.options.typeSpeed - Math.random() * 100;\r\n\r\n        if (this.isDeleting) { delta /= 2; }\r\n\r\n        if (!this.isDeleting && this.text === fullTxt) {\r\n            delta = this.options.phrasePeriod;\r\n            this.isDeleting = true;\r\n        } else if (this.isDeleting && this.text === \"\") {\r\n            this.isDeleting = false;\r\n            this.loopNum++;\r\n            delta = 500;\r\n        }\r\n\r\n        setTimeout(function() {\r\n            that.typewrite();\r\n        }, delta);\r\n    }\r\n\r\n    private appendAnimationCss () {\r\n        let css = document.createElement(\"style\");\r\n        css.type = \"text/css\";\r\n        css.id = \"typing\";\r\n\r\n        const innerCss = `\r\n            .txt-rotate > .wrap::after {\r\n                content: \"|\";\r\n                opacity: 1;\r\n                animation: typedBlink 0.7s infinite;\r\n                -webkit-animation: typedBlink 0.7s infinite;\r\n                animation: typedBlink 0.7s infinite;\r\n            }\r\n            @keyframes typedBlink{\r\n                50% { opacity: 0.0; }\r\n            }\r\n            @-webkit-keyframes typedBlink{\r\n                0% { opacity: 1; }\r\n                50% { opacity: 0.0; }\r\n                100% { opacity: 1; }\r\n            }\r\n        `;\r\n\r\n        css.innerHTML = innerCss;\r\n        document.head.appendChild(css);\r\n    }\r\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}